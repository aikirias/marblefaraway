import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta, date
from .scheduler import ProjectScheduler
from ..common.models import Team, Project, Assignment, SimulationInput
from ..common.simulation_data_loader import load_simulation_input_from_db

def render_simulation():
    """Renderiza la interfaz de simulaci√≥n de scheduling APE"""
    
    st.header("üî¨ Simulador de Scheduling APE")
    st.markdown("Visualiza c√≥mo funciona el algoritmo de scheduling **under the hood** usando la estructura real de APE.")
    
    # Pesta√±as para diferentes tipos de simulaci√≥n
    tab1, tab2 = st.tabs(["üéÆ Constructor Visual", "üè¢ Datos Reales"])
    
    with tab1:
        st.markdown("**Crea casos de prueba personalizados para experimentar**")
        render_visual_builder()
    
    with tab2:
        st.markdown("**Simula usando proyectos y equipos reales de la base de datos**")
        render_real_data_simulation()


def render_visual_builder():
    """Renderiza el constructor visual de casos de prueba"""
    from .test_case_builder import render_test_case_builder
    render_test_case_builder()


def render_real_data_simulation():
    """Renderiza simulaci√≥n con datos reales de la DB"""
    
    st.subheader("üè¢ Simulaci√≥n con Datos Reales")
    
    # Configuraci√≥n de simulaci√≥n
    col1, col2 = st.columns(2)
    with col1:
        sim_start_date = st.date_input(
            "Fecha de inicio de simulaci√≥n",
            value=date.today(),
            key="real_sim_start"
        )
    
    with col2:
        if st.button("üöÄ Ejecutar Simulaci√≥n con Datos Reales", key="run_real_sim"):
            try:
                # Cargar datos reales
                with st.spinner("Cargando datos desde la base de datos..."):
                    simulation_input = load_simulation_input_from_db(sim_start_date)
                
                # Verificar que hay datos
                if not simulation_input.teams:
                    st.error("No hay equipos en la base de datos. Crea equipos primero en la pesta√±a Teams.")
                    return
                
                if not simulation_input.projects:
                    st.error("No hay proyectos en la base de datos. Crea proyectos primero en la pesta√±a Projects.")
                    return
                
                if not simulation_input.assignments:
                    st.error("No hay asignaciones en la base de datos. Los proyectos necesitan asignaciones de equipos.")
                    return
                
                # Ejecutar simulaci√≥n
                with st.spinner("Ejecutando simulaci√≥n..."):
                    scheduler = ProjectScheduler()
                    result = scheduler.simulate(simulation_input)
                
                # Mostrar resultados
                st.success(f"‚úÖ Simulaci√≥n completada con {len(result.assignments)} asignaciones")
                
                # M√©tricas generales
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìã Proyectos", len(simulation_input.projects))
                with col2:
                    st.metric("üë• Equipos", len(simulation_input.teams))
                with col3:
                    st.metric("üéØ Asignaciones", len(result.assignments))
                
                # Gr√°fico Gantt
                st.subheader("üìÖ Cronograma de Proyectos")
                
                # Preparar datos para Gantt
                gantt_data = []
                for assignment in result.assignments:
                    if assignment.calculated_start_date and assignment.calculated_end_date:
                        gantt_data.append({
                            "Task": f"{assignment.project_name} - {assignment.team_name}",
                            "Start": assignment.calculated_start_date,
                            "Finish": assignment.calculated_end_date,
                            "Project": assignment.project_name,
                            "Team": assignment.team_name,
                            "Priority": assignment.project_priority,
                            "Resource": f"Tier {assignment.tier} ({assignment.devs_assigned} devs)"
                        })
                
                if gantt_data:
                    gantt_df = pd.DataFrame(gantt_data)
                    
                    fig = px.timeline(
                        gantt_df,
                        x_start="Start",
                        x_end="Finish",
                        y="Task",
                        color="Project",
                        title="üìÖ Cronograma de Proyectos - Datos Reales",
                        hover_data=["Team", "Priority", "Resource"],
                        height=max(400, len(gantt_data) * 25)
                    )
                    fig.update_yaxes(autorange="reversed")
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Resumen por proyecto
                    st.subheader("üìä Resumen por Proyecto")
                    project_summary = []
                    for project_id, project in simulation_input.projects.items():
                        start_date = result.get_project_start_date(project_id)
                        end_date = result.get_project_end_date(project_id)
                        project_assignments = result.get_assignments_by_project(project_id)
                        
                        project_summary.append({
                            "Proyecto": project.name,
                            "Prioridad": project.priority,
                            "Inicio Calculado": start_date.strftime("%Y-%m-%d") if start_date else "N/A",
                            "Fin Calculado": end_date.strftime("%Y-%m-%d") if end_date else "N/A",
                            "Equipos Asignados": len(project_assignments),
                            "Due Date (sin QA)": project.due_date_wo_qa.strftime("%Y-%m-%d"),
                            "Due Date (con QA)": project.due_date_with_qa.strftime("%Y-%m-%d")
                        })
                    
                    summary_df = pd.DataFrame(project_summary)
                    st.dataframe(summary_df, use_container_width=True)
                    
                    # An√°lisis de cumplimiento
                    st.subheader("‚ö†Ô∏è An√°lisis de Cumplimiento")
                    delays = []
                    for _, row in summary_df.iterrows():
                        if row["Fin Calculado"] != "N/A":
                            calc_end = pd.to_datetime(row["Fin Calculado"]).date()
                            due_date = pd.to_datetime(row["Due Date (sin QA)"]).date()
                            if calc_end > due_date:
                                delay_days = (calc_end - due_date).days
                                delays.append({
                                    "Proyecto": row["Proyecto"],
                                    "D√≠as de Retraso": delay_days,
                                    "Fin Calculado": row["Fin Calculado"],
                                    "Due Date": row["Due Date (sin QA)"]
                                })
                    
                    if delays:
                        st.warning(f"‚ö†Ô∏è {len(delays)} proyecto(s) con retrasos detectados:")
                        delays_df = pd.DataFrame(delays)
                        st.dataframe(delays_df, use_container_width=True)
                    else:
                        st.success("‚úÖ Todos los proyectos se completar√°n a tiempo seg√∫n la simulaci√≥n")
                
                else:
                    st.warning("No se pudieron calcular fechas para las asignaciones. Revisa la configuraci√≥n de los proyectos.")
                
            except Exception as e:
                st.error(f"Error en la simulaci√≥n: {str(e)}")
                st.exception(e)
    
    # Informaci√≥n sobre datos reales
    with st.expander("‚ÑπÔ∏è Informaci√≥n sobre Simulaci√≥n con Datos Reales"):
        st.markdown("""
        **¬øQu√© hace esta simulaci√≥n?**
        
        1. **Carga datos reales** de proyectos, equipos y asignaciones desde la base de datos
        2. **Ejecuta el algoritmo de scheduling** usando la misma l√≥gica que el constructor visual
        3. **Calcula fechas reales** de inicio y fin para cada asignaci√≥n
        4. **Detecta conflictos** y retrasos potenciales
        5. **Muestra el cronograma** resultante en formato Gantt
        
        **¬øC√≥mo usar los resultados?**
        
        - **Ajusta prioridades** de proyectos si hay retrasos
        - **Modifica asignaciones** de equipos para optimizar tiempos
        - **Cambia fechas** de ready_to_start si hay dependencias
        - **Re-ejecuta la simulaci√≥n** para ver el impacto de los cambios
        
        **Nota:** Los campos calculados (calculated_start_date, calculated_end_date) 
        son solo para la simulaci√≥n y NO se guardan en la base de datos.
        """)